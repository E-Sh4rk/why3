use int.Int
use mach.int.Int
use real.RealInfix
use real.ExpLog
use int.Power
use ref.Ref

(* ---------- PART I ---------- *)

axiom op_log : forall x:real,y:real. 0. <. x <. y -> log(x) <. log(y)

(* ---------- PART II ---------- *)

use int.EuclideanDivision as ED

let lemma euclid_uniq (x y q : int) : unit
  requires { y > 0 }
  requires { q * y <= x < q * y + y }
  ensures { ED.div x y = q } =
  ()

(*let power2 (l:int) : int
  requires { 0 <= l }
  ensures { result = power 2 l } =
  let r = ref 1 in
  for i = 0 to l-1 do
    invariant { !r = power 2 i }
    r := !r * 2
  done ;
  !r*)
  
let rec power2 (l:int) : int
  requires { 0 <= l }
  ensures { result = power 2 l }
  variant { l } =
  if l = 0 then 1 else 2 * (power2 (l-1))
  
let shift_left (z: int) (l:int) : int
  requires { 0 <= l }
  ensures { result = z * (power 2 l) } =
  z * (power2 l)
  
let ediv_mod (x:int) (y:int) : (int, int)
  requires { 0 < y }
  ensures { let d,r = result in
  d = ED.div x y /\ r = ED.mod x y } =
  let q = ref 0 in
  let r = ref x in
  if 0 <= x then (
     while !r >= y do
        invariant { x = !q * y + !r /\ 0 <= !r }
        variant { !r }
        r := !r - y; q := !q + 1
     done
   ) else (
    while !r < 0 do
        invariant { x = !q * y + !r /\ !r < 0 }
        variant { -(!r) }
        r := !r + y; q := !q - 1
     done
   ) ;
   (!q, !r)
  
let shift_right (z: int) (l:int) : int
  requires { 0 <= l }
  ensures { result = ED.div z (power 2 l) } =
  let d,_ = ediv_mod z (power2 l) in
  d

use real.Square
use real.FromInt
use real.Truncate

let function isqrt (n:int) : int
  requires { 0 <= n }
  ensures { result = floor (sqrt (from_int n)) }
  =
  let count = ref 0 in
  let sum = ref 1 in
    while !sum <= n do
      invariant { 0 <= !count }
      invariant { !count * !count <= n }
      invariant { !sum = (!count+1)*(!count+1) }
      variant { n - !sum }
      count := !count + 1;
      sum := !sum + 2 * !count + 1
    done ;
    assert { !count >= 0 /\ !count * !count <= n < (!count + 1)*(!count + 1) } ;
    assert { from_int !count <=. sqrt (from_int n) <. from_int (!count + 1) } ;
    !count
    
(* ---------- PART III ---------- *)

use real.PowerReal

function b : real = 4.

function _B (n:int) : real = pow b (from_int n)

lemma _B_6 : forall n. _B n >. 0.

lemma _B_7 : forall n, m. (_B n) *. (_B m) = _B (n + m)

lemma _B_8 : forall n. _B n *. _B (-n) = 1.

lemma _B_9_1 : forall n. sqrt (_B (2*n)) = _B n

lemma _B_9 : forall a,n. 0. <=. a -> sqrt (a *. _B (2*n)) = (sqrt a) *. (_B n)

lemma _B_10 : forall y. 0 <= y -> _B y = from_int (power 4 y)

lemma _B_11_1 : forall y. (pow b y)*.(pow b (-.y)) = 1. (* Same as B_8 but for reals *)

lemma _B_11 : forall y. y < 0 -> _B y = inv (from_int (power 4 (-y)))

lemma _B_12 : forall y. 0 <= y -> power 2 (2 * y) = power 4 y


(* ---------- PART IV ---------- *)

predicate framing (x:real) (p:int) (n:int) =
  (from_int p -. 1.) *. (_B (-n)) <. x <. (from_int p +. 1.) *. (_B (-n))

(* This definition is better because it is separated into 2 simpler inequalities. So we can prove them separately (it is simpler). *)

(* 1. Addition *)
let round_z_over_4 (z : int)
  ensures { ((from_int z) -. 2.) *. (_B (-1)) <. from_int result <=. ((from_int z) +. 2.) *. (_B (-1))
         by (from_int z) -. 2. <. (from_int result) *. (_B 1)
         so (from_int result) *. (_B 1) <=. (from_int z) +. 2. }
  =
  assert { (from_int (ED.div (z+2) 4)) *. (_B 1) <=. (from_int z) +. 2. } ;
  assert { (from_int z) -. 2. <. (from_int (ED.div (z+2) 4)) *. (_B 1) } ;
  shift_right (z + 2) 2

let compute_round (n:int) (ghost z : real) (zp: int)
  requires { (from_int zp -. 2.) *. _B (-(n+1)) <. z <=. (from_int zp +. 2.) *. _B (-(n+1)) }
  ensures { framing z result n } =
  let ghost lb = (from_int zp -. 2.) *. _B (-(n+1)) in
  let ghost hb = (from_int zp +. 2.) *. _B (-(n+1)) in
  assert { lb <. z <=. hb } ;
  let res = round_z_over_4 zp
  in
    (* Lower bound *)
    assert { (from_int res) <=. ((from_int zp +. 2.) *. _B (-1)) } ;
    assert { (from_int res) *. (_B (-n)) <=. ((from_int zp +. 2.) *. _B (-1)) *. (_B (-n)) } ;
    assert { (from_int res) *. (_B (-n)) <=. ((from_int zp +. 2.) *. _B (-(n+1))) } ;
    assert { (from_int res) *. (_B (-n)) <=. ((from_int zp -. 2. +. 4.) *. _B (-(n+1))) } ;
    assert { (from_int res) *. (_B (-n)) <=. ((from_int zp -. 2. +. (_B 1)) *. _B (-(n+1))) } ;
    assert { (from_int res) *. (_B (-n)) <=. (from_int zp -. 2.) *. _B (-(n+1)) +. (_B (-(n+1))) *. (_B 1) } ;
    assert { (from_int res) *. (_B (-n)) <=. lb +. (_B (-(n+1))) *. (_B 1) } ;
    assert { (from_int res) *. (_B (-n)) <=. lb +. (_B (-n)) } ;
    assert { (from_int res -. 1.) *. (_B (-n)) <=. lb } ;
    (* Higher bound *)
    assert { (from_int zp -. 2.) *. _B (-1) <. (from_int res) } ;
    assert { (from_int zp -. 2.) *. _B (-1) *. (_B (-n)) <. (from_int res) *. (_B (-n)) } ;
    assert { (from_int zp -. 2.) *. _B (-(n+1)) <. (from_int res) *. (_B (-n)) } ;
    assert { (from_int zp +. 2. -. 4.) *. _B (-(n+1)) <. (from_int res) *. (_B (-n)) } ;
    assert { (from_int zp +. 2. -. (_B 1)) *. _B (-(n+1)) <. (from_int res) *. (_B (-n)) } ;
    assert { (from_int zp +. 2.) *. _B (-(n+1)) -. (_B (-(n+1))) *. (_B 1) <. (from_int res) *. (_B (-n)) } ;
    assert { hb -. (_B (-(n+1))) *. (_B 1) <. (from_int res) *. (_B (-n)) } ;
    assert { hb -. (_B (-n)) <. (from_int res) *. (_B (-n)) } ;
    assert { hb <. (from_int res +. 1.) *. (_B (-n)) } ;
    res
  
let compute_add (n: int) (ghost x : real) (xp : int) (ghost y : real) (yp : int)
  requires { framing x xp (n+1) }
  requires { framing y yp (n+1) }
  ensures { framing (x+.y) result n } =
  compute_round n (x+.y) (xp + yp)

(* 2. Subtraction *)

let compute_neg (n: int) (ghost x : real) (xp : int)
  requires { framing x xp n }
  ensures { framing (-.x) result n } =
  -xp

let compute_sub (n: int) (ghost x : real) (xp : int) (ghost y : real) (yp : int)
  requires { framing x xp (n+1) }
  requires { framing y yp (n+1) }
  ensures { framing (x-.y) result n } =
  compute_add n x xp (-.y) (-yp)

(* 3. Conversion of Integer Constant *)

lemma div_boundary : forall x, y. y>0 -> (ED.div x y) * y - y < x < (ED.div x y) * y + y

let compute_cst (n: int) (x : int) : int
  ensures { framing (from_int x) result n } =
  if n = 0 then
    x
  else if n < 0 then (
    assert { (from_int (ED.div x (power 2 (2*(-n)))) -. 1. ) *. (_B (-n)) <. from_int x 
          by (ED.div x (power 4 (-n)) - 1) * (power 4 (-n)) < x
          so from_int ((ED.div x (power 4 (-n)) - 1) * (power 4 (-n))) <. from_int x
          so (from_int (ED.div x (power 4 (-n))) -. 1. ) *. from_int (power 4 (-n)) <. from_int x } ;

    assert { from_int x <. (from_int (ED.div x (power 2 (2*(-n)))) +. 1. ) *. (_B (-n))
          by x < (ED.div x (power 4 (-n)) + 1) * (power 4 (-n))
          so from_int x <. from_int ((ED.div x (power 4 (-n)) + 1) * (power 4 (-n)))
          so from_int x <. (from_int (ED.div x (power 4 (-n))) +. 1. ) *. from_int (power 4 (-n)) } ;
    
    shift_right x (2*(-n))
    )
  else (
  
    assert { from_int x <. (from_int (x * (power 2 (2*n))) +. 1. ) *. (_B (-n))
          by from_int x <. (from_int (x * (power 4 n))) *. (inv (from_int (power 4 n))) +. (inv (from_int (power 4 n)))
          so from_int x <. (from_int (x * (power 2 (2*n))) +. 1. ) *. (inv (from_int (power 4 n))) } ;
  
    assert { (from_int (x * (power 2 (2*n))) -. 1. ) *. (_B (-n)) <. from_int x 
          by let y = (power 4 n) in (from_int (x * y)) *. (inv (from_int y)) = from_int x
          so let y = (power 4 n) in (from_int (x * y)) *. (inv (from_int y)) -. (inv (from_int y)) <. from_int x
          so let y = (power 4 n) in (from_int (x * y)) *. (inv (from_int y)) -. (inv (from_int y)) <. from_int x
          so (from_int (x * (power 2 (2*n))) -. 1. ) *. (inv (from_int (power 4 n))) <. from_int x } ;

    shift_left x (2*n)
    )

(* 4. Square Root *)

function isqrt_2 (n:int) : int = ceil (sqrt (from_int n))

let lemma sqrt_boundaries (n:int) : unit
  requires { n >= 1 }
  ensures { sqrt (from_int (n+1)) -. sqrt (from_int n) <=. 1. } =
  assert { sqrt (from_int (n+1)) -. sqrt (from_int n) <=. 1.
        by sqr (sqrt (from_int (n+1)) -. sqrt (from_int n))
        = sqr (sqrt (from_int (n+1))) -. 2. *. (sqrt (from_int (n+1))) *. (sqrt (from_int n)) +. sqr (sqrt (from_int n))
        = (from_int (n+1)) -. 2. *. (sqrt (from_int (n+1))) *. (sqrt (from_int n)) +. (from_int n)
        <=. (from_int (n+1)) -. 2. *. (sqrt (from_int n)) *. (sqrt (from_int n)) +. (from_int n)
        <=. (from_int (n+1)) -. 2. *. (from_int n) +. (from_int n)
        <=. 1. }

let lemma sqrt_boundary1 (n: int) : unit
  requires { n >= 1 }
  ensures { isqrt_2 (n+1) - 1 <= isqrt n } =
  let k = isqrt n in
  let k' = isqrt (n+1) in
  if k' * k' = n + 1 then
  (
    assert { isqrt_2 (n+1) - 1 <= isqrt n
          by sqrt (from_int (n + 1)) -. 1. <=. sqrt (from_int n) <=. from_int (isqrt n)
          /\ from_int (isqrt_2 (n+1)) = from_int (k'*k') = sqrt (from_int (n + 1)) }
  )
  else
  (
    if k' > k then
      assert { false
            by k' <= isqrt (n+1)
            so sqr (from_int k') <=. sqr (from_int (isqrt (n+1))) <=. sqr (sqrt (from_int (n+1)))
            so k' * k' <= n + 1 /\ k' * k' <> n + 1
            so sqrt (from_int n) <. from_int k' <. sqrt (from_int (n+1))
            so from_int n <. sqr (from_int k') <. from_int (n+1)
            so n < k' * k' < n+1 }
    else
      assert { isqrt_2 (n+1) - 1 <= isqrt n
            by k' <= k
            so k' < k + 1
            so floor (sqrt (from_int (n+1))) < k + 1
            so sqrt (from_int (n+1)) <=. from_int (k + 1)
            so isqrt_2 (n+1) <= k + 1 }
  )
  
let lemma sqrt_boundary2 (n: int) : unit
  requires { n >= 1 }
  ensures { isqrt n <= isqrt (n-1) + 1 } = ()
  

let compute_sqrt (n: int) (ghost x : real) (xp : int)
  requires { 0. <=. x }
  requires { framing x xp (2*n) }
  ensures { framing (sqrt x) result n } =
  if xp <= 0 then
  (
    assert { 0. <=. sqrt x <. _B (-n)
          by (from_int xp +. 1.) <=. 1.
          so 0. <=. x <. (from_int xp +. 1.) *. (_B (-2*n)) <=. (_B (-2*n))
          so sqrt 0. <=. sqrt x <. sqrt (_B (-2*n)) } ;
    0
  )
  else
  (
    assert { (from_int (isqrt xp) -. 1.) *. (_B (-n)) <. sqrt x
          by (from_int xp -. 1.) *. (_B (-2*n)) <. x
          so sqrt ((from_int xp -. 1.) *. (_B (-2*n))) <. sqrt x
          so sqrt (from_int xp -. 1.) *. (_B (-n)) <. sqrt x
          so sqrt (from_int xp -. 1.) *. (_B (-n)) *. (_B n) <. sqrt x *. (_B n)
          so sqrt (from_int xp -. 1.) <. sqrt x *. (_B n)
          /\ isqrt_2 xp - 1 <= isqrt (xp - 1)
          so from_int (isqrt_2 (xp) - 1) <. sqrt x *. (_B n)
          so from_int (isqrt (xp) - 1) <. sqrt x *. (_B n)
          so from_int (isqrt (xp) - 1) *. (_B (-n)) <. sqrt x *. (_B n) *. (_B (-n)) } ;
    assert { sqrt x <. (from_int (isqrt xp) +. 1.) *. (_B (-n))
          by x <. (from_int xp +. 1.) *. (_B (-2*n))
          so sqrt x <. sqrt ((from_int xp +. 1.) *. (_B (-2*n)))
          so sqrt x <. sqrt (from_int xp +. 1.) *. (_B (-n))
          so sqrt x *. (_B n) <. sqrt (from_int xp +. 1.) *. (_B (-n)) *. (_B n)
          so sqrt x *. (_B n) <. sqrt (from_int xp +. 1.)
          /\ isqrt (xp + 1) <= isqrt xp + 1
          so sqrt x *. (_B n) <. from_int (isqrt xp + 1)
          so sqrt x *. (_B n) *. (_B (-n)) <. from_int (isqrt xp + 1) *. (_B (-n)) } ;
    isqrt xp
  )

(* 5. Compute *)

type term =
| Cst int
| Add term term
| Neg term
| Sub term term
| Sqrt term

let rec ghost function interp (t:term) : real =
  match t with
  | Cst i     -> from_int i
  | Add t1 t2 -> (interp t1) +. (interp t2)
  | Neg t     -> -. (interp t)
  | Sub t1 t2 -> (interp t1) -. (interp t2)
  | Sqrt t    -> sqrt (interp t)
  end
  
let rec ghost function wf_term (t:term) : bool =
  match t with
  | Cst _     -> true
  | Add t1 t2 -> (wf_term t1) && (wf_term t2)
  | Neg t     -> wf_term t
  | Sub t1 t2 -> (wf_term t1) && (wf_term t2)
  | Sqrt t    -> (wf_term t) && (interp t >=. 0.)
  end
  
let rec compute (t:term) (n:int) : int
  requires { wf_term t }
  ensures { framing (interp t) result n }
  variant { t }
  =
  match t with
  | Cst c     -> compute_cst n c
  | Add t1 t2 -> compute_add n (interp t1) (compute t1 (n+1)) (interp t2) (compute t2 (n+1))
  | Neg t     -> compute_neg n (interp t)  (compute t n)
  | Sub t1 t2 -> compute_sub n (interp t1) (compute t1 (n+1)) (interp t2) (compute t2 (n+1))
  | Sqrt t    -> compute_sqrt n (interp t) (compute t (2*n))
  end
  
(* ---------- PART V ---------- *)

let lemma eucl_div_1 (a: int) (b: int) : unit
  requires { 0 < a /\ 0 < b /\ ED.div a b < b }
  ensures { (ED.mod a b < ED.div a b  -> ED.div a (b+1) = (ED.div a b) - 1)
         /\ (ED.mod a b >= ED.div a b -> ED.div a (b+1) = (ED.div a b)) } = ()
  
let lemma eucl_div_2 (a: int) (b: int) : unit
  requires { 0 < a /\ 1 < b /\ ED.div a b < b - 1 }
  ensures { ( b - 1 - ED.div a b <= ED.mod a b -> ED.div a (b-1) = (ED.div a b) + 1)
         /\ ( b - 1 - ED.div a b > ED.mod a b  -> ED.div a (b-1) = (ED.div a b)) } = ()
        
let lemma eucl_div_cor_1 (a: int) (b: int) : unit
  requires { 0 < a /\ 1 < b /\ ED.div a b < b }
  ensures { ED.div a (b+1) >= (ED.div a b) - 1 } =
  assert { ED.div a (b+1) = (ED.div a b) - 1 \/ ED.div a (b+1) = (ED.div a b) }
         
let lemma eucl_div_cor_2 (a: int) (b: int) : unit
  requires { 0 < a /\ 1 < b /\ ED.div a b < b - 1 }
  ensures { ED.div a (b-1) <= (ED.div a b) + 1 } =
  assert { ED.div a (b-1) = (ED.div a b) + 1 \/ ED.div a (b-1) = (ED.div a b) }

let lemma strict_ineq (x:real) (y:real) (z:real) : unit
  requires { x <. y /\ z >. 0. }
  ensures { x *. z <. y *. z } = ()

let lemma strict_ineq_int (x:int) (y:int) (z:int) : unit
  requires { x < y /\ z > 0 }
  ensures { x * z < y * z } = ()

let lemma inv_ineq (x:real) (y:real) : unit
  requires { 0. <. x <. y }
  ensures { inv y <. inv x } = ()

let lemma div_ineq (x:int) (y:int) : unit
  requires { 0 < y }
  ensures { from_int (ED.div x y) <=. from_int x /. from_int y } =
  let ghost d = ED.div x y in
  let ghost r = ED.mod x y in
  assert { from_int d <=. from_int x /. from_int y
        by d*y + r = x so d*y = x - r so d*y <= x so from_int d *. from_int y <=. from_int x }
 
let inv_simple_simple (ghost x:real) (p:int) (n:int)
  requires { framing x p (n+1) }
  requires { 0 <= n }
  requires { 1. <=. x }
  ensures { framing (inv x) result n } =
  
  let k = n + 1 in
  let pow4nk = power2 (2*(n+k)) in
  let d,r = ediv_mod pow4nk p in
  
  assert { _B k <=. from_int p
        by 1. <=. x <. from_int (p + 1) *. (_B (-k))
        so 1. *. (_B k) <. from_int (p + 1) *. (_B (-k)) *. (_B k)
        so (_B k) <. from_int (p + 1)
        so power 4 k < p + 1 
        so power 4 k <= p } ;
  assert { (_B n) *. (_B k) <=. (from_int p /. 4.) *. (from_int p)
        by _B (n+k) = (_B n) *. (_B k) /\ _B n <=. (from_int p /. 4.) /\ _B k <=. (from_int p)
        so (_B (n+k)) = (_B n) *. (_B k) <=. (_B n) *. (from_int p) <=. (from_int p /. 4.) *. (from_int p)  } ;
  assert { from_int d <=. (from_int p -. 1.) /. 2.
        by d = ED.div (power 4 (n+k)) p /\ r = ED.mod (power 4 (n+k)) p
        so power 4 (n+k) = p * d + r so p * d = power 4 (n+k) - r
        so from_int d *. from_int p = from_int (power 4 (n+k) - r) = _B (n+k) -. from_int r <=. (from_int p /. 4.) *. (from_int p) -. from_int r
        so from_int d *. from_int p <=. ((from_int p /. 4.) *. (from_int p) -. from_int r)
        so from_int d *. from_int p *. inv (from_int p)  <=. ((from_int p /. 4.) *. (from_int p) -. from_int r) *. inv (from_int p)
        /\ from_int p *. inv (from_int p) = 1.
        so from_int d = from_int d *. 1. <=. ((from_int p /. 4.) *. (from_int p) -. from_int r) *. inv (from_int p) } ;
        
  assert { from_int pow4nk = from_int (power 2 (2*(n+k))) = _B k *. _B n } ;
  assert { inv (_B (-k)) = _B k by _B (-k) *. _B k = 1. so _B (-k) = 1. /. _B k } ;
  
  assert { from_int pow4nk *. inv (from_int (p+1)) <. inv x *. (_B n)
        by x <. (from_int (p+1)) *. (_B (-(n+1)))
        so inv (from_int (p+1)) *. _B k = inv (from_int (p+1)) *. _B (n+1)
           = inv (from_int (p+1)) *. inv (_B (-(n+1))) = inv ((from_int (p+1)) *. (_B (-(n+1)))) <. inv x
        so inv (from_int (p+1)) *. (from_int pow4nk) = inv (from_int (p+1)) *. _B k *. _B n <. inv x *. _B n } ;
        
  assert { inv x *. (_B n) <. from_int pow4nk *. inv (from_int (p-1))
        by p > 1 so p - 1 > 0 so 0. <. (from_int (p-1)) *. (_B (-(n+1))) <. x
        so inv x <. inv ((from_int (p-1)) *. (_B (-(n+1)))) = inv (from_int (p-1)) *. inv (_B (-(n+1)))
           = inv (from_int (p-1)) *. _B (n+1) = inv (from_int (p-1)) *. _B k
        so inv x *. _B n <. inv (from_int (p-1)) *. _B k *. _B n = inv (from_int (p-1)) *. (from_int pow4nk) } ;
  
  let ghost dm = ED.div pow4nk (p-1) in
  let ghost rm = ED.mod pow4nk (p-1) in
  let ghost dp = ED.div pow4nk (p+1) in
  
  if 2*r <= p
  then
  (
    assert { dm = d
          by 0 < p - 2 /\ 0 < p so 0 = 0*p < (p-2)*p = p*p - 2 *p
          so 0 + (3*p*p + 2*p) < p*p - 2*p + (3*p*p + 2*p)
          so 2*p*(p-1) + p*p + 4*p = 3*p*p + 2*p < 4*p*p
          so from_int (2*p*(p-1)) +. from_int (p*p) +. from_int (4*p) <. from_int (4*p*p)
          so (from_int p)/.2. *. from_int (p-1) +. from_int (p*p) /. 4. +. from_int (p)
             = from_int (2*p*(p-1)) /. 4. +. from_int (p*p) /. 4. +. from_int (4*p) /. 4.
             = (from_int (2*p*(p-1)) +. from_int (p*p) +. from_int (4*p)) /. 4.
             <. from_int (4*p*p) /. 4. = from_int (p*p) /\ (from_int p)/.2. >=. from_int r
          so (from_int r) *. from_int (p-1) <=. (from_int p)/.2. *. from_int (p-1)
          so (from_int r) *. from_int p +. (from_int (p*p) /. 4. -. from_int r) +. from_int (p)
             = (from_int r) *. from_int (p-1) +. from_int (p*p) /. 4. +. from_int (p)
             <=. (from_int p)/.2. *. from_int (p-1) +. from_int (p*p) /. 4. +. from_int (p)
             /\ _B (n+k) -. (from_int r) <=. from_int (p*p) /. 4. -. from_int r /\ pow4nk = d*p+r
          so from_int (d*p) = from_int (pow4nk - r) = _B (n+k) -. (from_int r)
             <=. from_int (p*p) /. 4. -. from_int r
          so from_int (d*p) +. (from_int r) *. from_int p +. from_int (p)
             <=. from_int (p*p) /. 4. -. from_int r +. (from_int r) *. from_int p +. from_int (p) <. from_int (p*p)
          so from_int d +. from_int r +. 1. = from_int (d*p) /. (from_int p) +. (from_int r) *. from_int p /. (from_int p) +. from_int (p) /. (from_int p)
             = (from_int (d*p) +. (from_int r) *. from_int p +. from_int (p)) /. (from_int p)
             <=. from_int (p*p) /. (from_int p) = from_int p
          so r + d + 1 < p } ; 
    assert { (from_int d -. 1.) *. (_B (-n)) <. inv x
          by d - 1 <= dp so from_int (d - 1) <=. from_int dp = from_int (ED.div pow4nk (p+1)) <=. from_int pow4nk /. (from_int (p+1))
             = from_int pow4nk *. inv (from_int (p+1)) <. inv x *. (_B n)
          so from_int d -. 1. <. inv x *. _B n /\ (_B (-n)) >=. 0.
          so (from_int d -. 1.) *. (_B (-n)) <. inv x *. _B n *. (_B (-n)) } ;
    assert { inv x <. (from_int d +. 1.) *. (_B (-n)) } ;
    d
  )
  else
  (
    assert { d = dp by 2*r >= p +1 > p-1 >= 2*d so r > d } ;
    assert { (from_int d) *. (_B (-n)) <. inv x
          by from_int d = from_int dp = from_int (ED.div pow4nk (p+1)) <=. from_int pow4nk /. (from_int (p+1))
             = from_int pow4nk *. inv (from_int (p+1)) <. inv x *. (_B n)
          so from_int d <. inv x *. _B n /\ (_B (-n)) >=. 0.
          so (from_int d) *. (_B (-n)) <. inv x *. _B n *. (_B (-n)) } ;
          
    assert { dm <= d+1 by ED.div pow4nk (p-1) <= (ED.div pow4nk p) + 1 } ;
    assert { inv x <. (from_int d +. 2.) *. (_B (-n))
          by pow4nk = (p-1)*dm+rm /\ (from_int (p-1) *. inv (from_int (p-1))) = 1.
          so inv x *. (_B n) <. from_int pow4nk *. inv (from_int (p-1)) = from_int ((p-1)*dm+rm) *. inv (from_int (p-1))
             = from_int ((p-1)*dm) *. inv (from_int (p-1)) +. from_int rm *. inv (from_int (p-1))
             = from_int dm *. (from_int (p-1) *. inv (from_int (p-1))) +. (from_int rm *. inv (from_int (p-1)))
             = from_int dm *. 1. +. (from_int rm *. inv (from_int (p-1))) = from_int dm +. from_int rm *. inv (from_int (p-1))
             /\ from_int rm <=. from_int (p-1)
          so from_int rm *. inv (from_int (p-1)) <=. (from_int (p-1)) *. inv (from_int (p-1)) = 1. /\ from_int dm <=. from_int d +. 1.
          so from_int dm +. from_int rm *. inv (from_int (p-1)) <=. from_int dm +. 1. <=. (from_int d +. 1.) +. 1. <=. from_int d +. 2.
          so inv x *. (_B n) <. from_int dm +. from_int rm *. inv (from_int (p-1)) <=. from_int d +. 2.
          so inv x *. (_B n) <. from_int d +. 2. /\ inv (_B n) >. 0.
          so (inv x *. (_B n)) *. inv (_B n) <=. (from_int d +. 2.) *. inv (_B n) /\ (inv x *. (_B n)) *. inv (_B n) <> (from_int d +. 2.) *. inv (_B n)
          so (_B n) *. inv (_B n) = 1. so inv x *. ((_B n) *. inv (_B n)) = inv x *. 1. = inv x
              } ;
    assert { (from_int (d + 1) -. 1.) *. (_B (-n)) <. inv x <. (from_int (d+1) +. 1.) *. (_B (-n)) } ;
    d+1
  )
  
  
  
  
  
  
  
  
  