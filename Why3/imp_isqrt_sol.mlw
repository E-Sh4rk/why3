(* Integer square root *)

module Isqrt

  use import int.Int
  use import ref.Ref

  function sqr(n:int) : int = n * n

  val n : ref int
  val count : ref int
  val sum : ref int

  let isqrt ()
    requires { !n >= 0 }
    ensures { !count >= 0 /\ sqr !count <= !n < sqr (!count + 1) }
    diverges
    
  = count := 0; sum := 1;
    while !sum <= !n do
      invariant { 0 <= !count }
      invariant { sqr !count <= !n }
      invariant { !sum = sqr (!count+1) }
      count := !count + 1;
      sum := !sum + 2 * !count + 1
    done

  let test () =
    n := 42; isqrt(); !count
    (* run test using "why3 execute imp_isqrt_sol.mlw Isqrt.test" *)


end

(*
Local Variables:
compile-command: "why3 ide imp_isqrt_sol.mlw"
End:
*)
